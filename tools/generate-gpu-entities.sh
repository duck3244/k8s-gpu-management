#!/bin/bash

# Generate GPU Entities Script
# GPU 관련 엔티티 클래스들을 자동 생성하는 스크립트

set -e

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 프로젝트 루트 디렉토리 설정
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
ENTITY_DIR="$PROJECT_ROOT/src/main/java/com/k8s/monitor/entity/gpu"
DTO_DIR="$PROJECT_ROOT/src/main/java/com/k8s/monitor/dto/gpu"

# 로그 함수
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 도움말 함수
show_help() {
    cat << EOF
GPU Entity Generation Script

Usage: $0 [OPTIONS] [ENTITY_TYPE]

OPTIONS:
    -h, --help          Show this help message
    -v, --verbose       Verbose output
    -c, --clean         Clean existing files before generation
    -t, --templates     Use custom templates directory
    
ENTITY_TYPE:
    all                 Generate all GPU entities (default)
    models              Generate GPU model entities
    devices             Generate GPU device entities  
    allocations         Generate allocation entities
    metrics             Generate metrics entities
    mig                 Generate MIG-related entities

Examples:
    $0                  # Generate all entities
    $0 models           # Generate only GPU model entities
    $0 --clean all      # Clean and regenerate all entities
    $0 -v devices       # Generate device entities with verbose output

EOF
}

# 엔티티 템플릿 생성 함수
generate_gpu_model_template() {
    local entity_name="$1"
    local table_name="$2"
    
    cat > "$ENTITY_DIR/${entity_name}.java" << EOF
package com.k8s.monitor.entity.gpu;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.List;

/**
 * ${entity_name} entity
 * Auto-generated by generate-gpu-entities.sh
 */
@Entity
@Table(name = "${table_name}")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ${entity_name} {
    
    @Id
    @Column(name = "id", length = 50)
    private String id;
    
    @Column(name = "name", length = 100, nullable = false)
    private String name;
    
    @Column(name = "description", length = 500)
    private String description;
    
    @Column(name = "created_date")
    private LocalDateTime createdDate;
    
    @Column(name = "updated_date")
    private LocalDateTime updatedDate;
    
    @PrePersist
    protected void onCreate() {
        createdDate = LocalDateTime.now();
        updatedDate = LocalDateTime.now();
    }
    
    @PreUpdate
    protected void onUpdate() {
        updatedDate = LocalDateTime.now();
    }
}
EOF
}

# DTO 템플릿 생성 함수
generate_dto_template() {
    local dto_name="$1"
    
    cat > "$DTO_DIR/${dto_name}.java" << EOF
package com.k8s.monitor.dto.gpu;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * ${dto_name} DTO
 * Auto-generated by generate-gpu-entities.sh
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ${dto_name} {
    
    private String id;
    private String name;
    private String description;
    private LocalDateTime createdDate;
    private LocalDateTime updatedDate;
}
EOF
}

# Repository 템플릿 생성 함수
generate_repository_template() {
    local entity_name="$1"
    local repo_name="${entity_name}Repository"
    local repo_dir="$PROJECT_ROOT/src/main/java/com/k8s/monitor/repository/gpu"
    
    cat > "$repo_dir/${repo_name}.java" << EOF
package com.k8s.monitor.repository.gpu;

import com.k8s.monitor.entity.gpu.${entity_name};
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * ${entity_name} Repository
 * Auto-generated by generate-gpu-entities.sh
 */
@Repository
public interface ${repo_name} extends JpaRepository<${entity_name}, String> {
    
    // 이름으로 조회
    Optional<${entity_name}> findByName(String name);
    
    // 생성일 범위로 조회
    @Query("SELECT e FROM ${entity_name} e WHERE e.createdDate BETWEEN :startDate AND :endDate")
    List<${entity_name}> findByCreatedDateBetween(@Param("startDate") LocalDateTime startDate, 
                                                   @Param("endDate") LocalDateTime endDate);
    
    // 이름으로 검색
    List<${entity_name}> findByNameContainingIgnoreCase(String name);
}
EOF
}

# Service 템플릿 생성 함수
generate_service_template() {
    local entity_name="$1"
    local service_name="${entity_name}Service"
    local service_dir="$PROJECT_ROOT/src/main/java/com/k8s/monitor/service/gpu"
    
    cat > "$service_dir/${service_name}.java" << EOF
package com.k8s.monitor.service.gpu;

import com.k8s.monitor.entity.gpu.${entity_name};
import com.k8s.monitor.repository.gpu.${entity_name}Repository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

/**
 * ${entity_name} Service
 * Auto-generated by generate-gpu-entities.sh
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class ${service_name} {
    
    private final ${entity_name}Repository ${entity_name,,}Repository;
    
    /**
     * 모든 ${entity_name} 조회
     */
    public List<${entity_name}> findAll() {
        return ${entity_name,,}Repository.findAll();
    }
    
    /**
     * ID로 ${entity_name} 조회
     */
    public Optional<${entity_name}> findById(String id) {
        return ${entity_name,,}Repository.findById(id);
    }
    
    /**
     * ${entity_name} 저장
     */
    @Transactional
    public ${entity_name} save(${entity_name} ${entity_name,,}) {
        return ${entity_name,,}Repository.save(${entity_name,,});
    }
    
    /**
     * ${entity_name} 삭제
     */
    @Transactional
    public void deleteById(String id) {
        ${entity_name,,}Repository.deleteById(id);
    }
    
    /**
     * 이름으로 ${entity_name} 조회
     */
    public Optional<${entity_name}> findByName(String name) {
        return ${entity_name,,}Repository.findByName(name);
    }
}
EOF
}

# 디렉토리 생성 함수
create_directories() {
    log_info "Creating directories..."
    
    mkdir -p "$ENTITY_DIR"
    mkdir -p "$DTO_DIR"
    mkdir -p "$PROJECT_ROOT/src/main/java/com/k8s/monitor/repository/gpu"
    mkdir -p "$PROJECT_ROOT/src/main/java/com/k8s/monitor/service/gpu"
    
    log_success "Directories created successfully"
}

# GPU Model 관련 엔티티 생성
generate_model_entities() {
    log_info "Generating GPU model entities..."
    
    # GpuModelInfo 추가 엔티티 생성
    cat > "$ENTITY_DIR/GpuModelInfo.java" << 'EOF'
package com.k8s.monitor.entity.gpu;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * GPU Model Information entity
 * Auto-generated by generate-gpu-entities.sh
 */
@Entity
@Table(name = "gpu_model_info")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class GpuModelInfo {
    
    @Id
    @Column(name = "info_id", length = 50)
    private String infoId;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "model_id", nullable = false)
    private GpuModel model;
    
    @Column(name = "info_type", length = 50)
    private String infoType; // BENCHMARK, COMPATIBILITY, SPECIFICATION
    
    @Column(name = "info_key", length = 100)
    private String infoKey;
    
    @Column(name = "info_value", length = 1000)
    private String infoValue;
    
    @Column(name = "created_date")
    private LocalDateTime createdDate;
    
    @PrePersist
    protected void onCreate() {
        createdDate = LocalDateTime.now();
    }
}
EOF

    # GpuModelBenchmark 엔티티 생성
    cat > "$ENTITY_DIR/GpuModelBenchmark.java" << 'EOF'
package com.k8s.monitor.entity.gpu;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * GPU Model Benchmark entity
 * Auto-generated by generate-gpu-entities.sh
 */
@Entity
@Table(name = "gpu_model_benchmarks")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class GpuModelBenchmark {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "model_id", nullable = false)
    private GpuModel model;
    
    @Column(name = "benchmark_name", length = 100)
    private String benchmarkName;
    
    @Column(name = "benchmark_type", length = 50)
    private String benchmarkType; // COMPUTE, MEMORY, GAMING, AI
    
    @Column(name = "score", precision = 10, scale = 2)
    private Double score;
    
    @Column(name = "score_unit", length = 20)
    private String scoreUnit;
    
    @Column(name = "test_date")
    private LocalDateTime testDate;
    
    @Column(name = "test_environment", length = 500)
    private String testEnvironment;
    
    @Column(name = "created_date")
    private LocalDateTime createdDate;
    
    @PrePersist
    protected void onCreate() {
        createdDate = LocalDateTime.now();
    }
}
EOF
    
    log_success "GPU model entities generated"
}

# GPU Device 관련 엔티티 생성
generate_device_entities() {
    log_info "Generating GPU device entities..."
    
    # GpuDeviceHistory 엔티티 생성
    cat > "$ENTITY_DIR/GpuDeviceHistory.java" << 'EOF'
package com.k8s.monitor.entity.gpu;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * GPU Device History entity
 * Auto-generated by generate-gpu-entities.sh
 */
@Entity
@Table(name = "gpu_device_history")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class GpuDeviceHistory {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "device_id", nullable = false)
    private GpuDevice device;
    
    @Column(name = "event_type", length = 50)
    private String eventType; // STATUS_CHANGE, MAINTENANCE, ALLOCATION, DEALLOCATION
    
    @Column(name = "previous_value", length = 200)
    private String previousValue;
    
    @Column(name = "new_value", length = 200)
    private String newValue;
    
    @Column(name = "description", length = 500)
    private String description;
    
    @Column(name = "performed_by", length = 100)
    private String performedBy;
    
    @Column(name = "created_date")
    private LocalDateTime createdDate;
    
    @PrePersist
    protected void onCreate() {
        createdDate = LocalDateTime.now();
    }
}
EOF

    # GpuDeviceMaintenance 엔티티 생성
    cat > "$ENTITY_DIR/GpuDeviceMaintenance.java" << 'EOF'
package com.k8s.monitor.entity.gpu;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * GPU Device Maintenance entity
 * Auto-generated by generate-gpu-entities.sh
 */
@Entity
@Table(name = "gpu_device_maintenance")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class GpuDeviceMaintenance {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "device_id", nullable = false)
    private GpuDevice device;
    
    @Column(name = "maintenance_type", length = 50)
    private String maintenanceType; // SCHEDULED, EMERGENCY, PREVENTIVE
    
    @Column(name = "description", length = 1000)
    private String description;
    
    @Column(name = "scheduled_date")
    private LocalDateTime scheduledDate;
    
    @Column(name = "completed_date")
    private LocalDateTime completedDate;
    
    @Column(name = "performed_by", length = 100)
    private String performedBy;
    
    @Column(name = "cost", precision = 10, scale = 2)
    private Double cost;
    
    @Column(name = "status", length = 20)
    private String status = "SCHEDULED"; // SCHEDULED, IN_PROGRESS, COMPLETED, CANCELLED
    
    @Column(name = "created_date")
    private LocalDateTime createdDate;
    
    @PrePersist
    protected void onCreate() {
        createdDate = LocalDateTime.now();
    }
}
EOF
    
    log_success "GPU device entities generated"
}

# 메트릭 관련 엔티티 생성
generate_metrics_entities() {
    log_info "Generating GPU metrics entities..."
    
    # GpuMetricsAlert 엔티티 생성
    cat > "$ENTITY_DIR/GpuMetricsAlert.java" << 'EOF'
package com.k8s.monitor.entity.gpu;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * GPU Metrics Alert entity
 * Auto-generated by generate-gpu-entities.sh
 */
@Entity
@Table(name = "gpu_metrics_alerts")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class GpuMetricsAlert {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "device_id")
    private GpuDevice device;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "mig_id")
    private MigInstance migInstance;
    
    @Column(name = "alert_type", length = 50)
    private String alertType; // TEMPERATURE, UTILIZATION, MEMORY, POWER
    
    @Column(name = "severity", length = 20)
    private String severity; // CRITICAL, WARNING, INFO
    
    @Column(name = "threshold_value", precision = 10, scale = 2)
    private Double thresholdValue;
    
    @Column(name = "actual_value", precision = 10, scale = 2)
    private Double actualValue;
    
    @Column(name = "message", length = 500)
    private String message;
    
    @Column(name = "triggered_date")
    private LocalDateTime triggeredDate;
    
    @Column(name = "resolved_date")
    private LocalDateTime resolvedDate;
    
    @Column(name = "status", length = 20)
    private String status = "ACTIVE"; // ACTIVE, ACKNOWLEDGED, RESOLVED
    
    @Column(name = "created_date")
    private LocalDateTime createdDate;
    
    @PrePersist
    protected void onCreate() {
        createdDate = LocalDateTime.now();
        if (triggeredDate == null) {
            triggeredDate = LocalDateTime.now();
        }
    }
}
EOF
    
    log_success "GPU metrics entities generated"
}

# MIG 관련 엔티티 생성
generate_mig_entities() {
    log_info "Generating MIG entities..."
    
    # MigUsageHistory 엔티티 생성
    cat > "$ENTITY_DIR/MigUsageHistory.java" << 'EOF'
package com.k8s.monitor.entity.gpu;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * MIG Usage History entity
 * Auto-generated by generate-gpu-entities.sh
 */
@Entity
@Table(name = "mig_usage_history")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class MigUsageHistory {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "mig_id", nullable = false)
    private MigInstance migInstance;
    
    @Column(name = "allocation_id", length = 50)
    private String allocationId;
    
    @Column(name = "user_id", length = 50)
    private String userId;
    
    @Column(name = "start_time")
    private LocalDateTime startTime;
    
    @Column(name = "end_time")
    private LocalDateTime endTime;
    
    @Column(name = "duration_hours", precision = 8, scale = 2)
    private Double durationHours;
    
    @Column(name = "avg_utilization", precision = 5, scale = 2)
    private Double avgUtilization;
    
    @Column(name = "cost", precision = 10, scale = 2)
    private Double cost;
    
    @Column(name = "created_date")
    private LocalDateTime createdDate;
    
    @PrePersist
    protected void onCreate() {
        createdDate = LocalDateTime.now();
    }
}
EOF
    
    log_success "MIG entities generated"
}

# 클린업 함수
clean_existing_files() {
    if [[ "$CLEAN_MODE" == "true" ]]; then
        log_warn "Cleaning existing generated files..."
        
        # 생성된 파일들 삭제 (주의: 기존 코드 백업 필요)
        find "$ENTITY_DIR" -name "*Info.java" -delete 2>/dev/null || true
        find "$ENTITY_DIR" -name "*Benchmark.java" -delete 2>/dev/null || true
        find "$ENTITY_DIR" -name "*History.java" -delete 2>/dev/null || true
        find "$ENTITY_DIR" -name "*Maintenance.java" -delete 2>/dev/null || true
        find "$ENTITY_DIR" -name "*Alert.java" -delete 2>/dev/null || true
        
        log_success "Cleanup completed"
    fi
}

# 메인 생성 함수
generate_entities() {
    local entity_type="$1"
    
    case "$entity_type" in
        "all")
            generate_model_entities
            generate_device_entities
            generate_metrics_entities
            generate_mig_entities
            ;;
        "models")
            generate_model_entities
            ;;
        "devices")
            generate_device_entities
            ;;
        "metrics")
            generate_metrics_entities
            ;;
        "mig")
            generate_mig_entities
            ;;
        *)
            log_error "Unknown entity type: $entity_type"
            show_help
            exit 1
            ;;
    esac
}

# 검증 함수
validate_generation() {
    log_info "Validating generated files..."
    
    local error_count=0
    
    # Java 파일 문법 검사
    for java_file in $(find "$ENTITY_DIR" -name "*.java" -newer "$ENTITY_DIR" 2>/dev/null); do
        if ! javac -cp "$(pwd)/lib/*" -d /tmp "$java_file" 2>/dev/null; then
            log_error "Syntax error in: $java_file"
            ((error_count++))
        fi
    done
    
    if [[ $error_count -eq 0 ]]; then
        log_success "All generated files are valid"
    else
        log_error "Found $error_count syntax errors"
        return 1
    fi
}

# 요약 함수
show_summary() {
    log_info "Generation Summary:"
    
    local entity_count=$(find "$ENTITY_DIR" -name "*.java" -newer "$ENTITY_DIR" 2>/dev/null | wc -l)
    local dto_count=$(find "$DTO_DIR" -name "*.java" -newer "$DTO_DIR" 2>/dev/null | wc -l)
    
    echo "  - Generated Entities: $entity_count"
    echo "  - Generated DTOs: $dto_count"
    echo "  - Entity Directory: $ENTITY_DIR"
    echo "  - DTO Directory: $DTO_DIR"
    
    log_success "GPU entity generation completed successfully!"
}

# 메인 실행 함수
main() {
    local entity_type="all"
    local verbose=false
    
    # 명령행 인자 파싱
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--verbose)
                verbose=true
                set -x
                shift
                ;;
            -c|--clean)
                CLEAN_MODE=true
                shift
                ;;
            -t|--templates)
                TEMPLATES_DIR="$2"
                shift 2
                ;;
            all|models|devices|allocations|metrics|mig)
                entity_type="$1"
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    log_info "Starting GPU entity generation..."
    log_info "Project root: $PROJECT_ROOT"
    log_info "Entity type: $entity_type"
    
    # 실행
    create_directories
    clean_existing_files
    generate_entities "$entity_type"
    
    if [[ "$verbose" == "true" ]]; then
        validate_generation
    fi
    
    show_summary
}

# 스크립트 실행
main "$@"
