# Kubernetes 리소스 모니터링 시스템 배포 설정
apiVersion: v1
kind: Namespace
metadata:
  name: k8s-monitoring
  labels:
    name: k8s-monitoring
    purpose: resource-monitoring

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-monitor-config
  namespace: k8s-monitoring
data:
  application.yml: |
    server:
      port: 8080
      servlet:
        context-path: /k8s-monitor
    
    spring:
      profiles:
        active: kubernetes
      datasource:
        url: jdbc:h2:mem:k8s_monitor
        driver-class-name: org.h2.Driver
        username: sa
        password: password
      jpa:
        hibernate:
          ddl-auto: create-drop
    
    k8s:
      monitor:
        collection-interval: 30
        retention-days: 7
        namespaces:
          - default
          - model-serving
          - vllm
          - sglang
        alerts:
          cpu-threshold: 80.0
          memory-threshold: 80.0
          gpu-threshold: 80.0

---
# ServiceAccount for Kubernetes API access
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-monitor-service-account
  namespace: k8s-monitoring

---
# ClusterRole with necessary permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-monitor-cluster-role
rules:
# Pod and Node access
- apiGroups: [""]
  resources: ["pods", "nodes"]
  verbs: ["get", "list", "watch"]
# Pod logs access (optional)
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get", "list"]
# Deployment and ReplicaSet access
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["get", "list", "watch"]
# Metrics server access
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
# Namespace access
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]
# Events access (for alerts)
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch"]
# ConfigMaps and Secrets (if needed)
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-monitor-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-monitor-cluster-role
subjects:
- kind: ServiceAccount
  name: k8s-monitor-service-account
  namespace: k8s-monitoring

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-resource-monitor
  namespace: k8s-monitoring
  labels:
    app: k8s-resource-monitor
    version: v1.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: k8s-resource-monitor
  template:
    metadata:
      labels:
        app: k8s-resource-monitor
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/k8s-monitor/actuator/prometheus"
    spec:
      serviceAccountName: k8s-monitor-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: k8s-resource-monitor
        image: k8s-resource-monitor:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        - name: JAVA_OPTS
          value: "-Xms512m -Xmx1024m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
        - name: TZ
          value: "Asia/Seoul"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /k8s-monitor/actuator/health/liveness
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /k8s-monitor/actuator/health/readiness
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /k8s-monitor/actuator/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: config-volume
        configMap:
          name: k8s-monitor-config
      - name: logs-volume
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - k8s-resource-monitor
              topologyKey: kubernetes.io/hostname

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: k8s-monitor-service
  namespace: k8s-monitoring
  labels:
    app: k8s-resource-monitor
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/k8s-monitor/actuator/prometheus"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app: k8s-resource-monitor

---
# Ingress (선택사항 - 외부 접근이 필요한 경우)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: k8s-monitor-ingress
  namespace: k8s-monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - k8s-monitor.your-domain.com
    secretName: k8s-monitor-tls
  rules:
  - host: k8s-monitor.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: k8s-monitor-service
            port:
              number: 80

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: k8s-monitor-hpa
  namespace: k8s-monitoring
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: k8s-resource-monitor
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60

---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: k8s-monitor-pdb
  namespace: k8s-monitoring
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: k8s-resource-monitor

---
# NetworkPolicy (선택사항 - 네트워크 보안이 중요한 경우)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: k8s-monitor-network-policy
  namespace: k8s-monitoring
spec:
  podSelector:
    matchLabels:
      app: k8s-resource-monitor
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS for Kubernetes API
    - protocol: TCP
      port: 6443 # Kubernetes API Server
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS

---
# ServiceMonitor for Prometheus (선택사항)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: k8s-monitor-service-monitor
  namespace: k8s-monitoring
  labels:
    app: k8s-resource-monitor
spec:
  selector:
    matchLabels:
      app: k8s-resource-monitor
  endpoints:
  - port: http
    path: /k8s-monitor/actuator/prometheus
    interval: 30s
    scrapeTimeout: 10s

---
# PrometheusRule for alerting (선택사항)
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: k8s-monitor-alerts
  namespace: k8s-monitoring
  labels:
    app: k8s-resource-monitor
spec:
  groups:
  - name: k8s-monitor.rules
    rules:
    - alert: K8sMonitorDown
      expr: up{job="k8s-resource-monitor"} == 0
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "K8s Resource Monitor is down"
        description: "K8s Resource Monitor has been down for more than 5 minutes."
    
    - alert: K8sMonitorHighMemory
      expr: container_memory_usage_bytes{pod=~"k8s-resource-monitor-.*"} / container_spec_memory_limit_bytes > 0.8
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "K8s Resource Monitor high memory usage"
        description: "K8s Resource Monitor memory usage is above 80% for more than 10 minutes."
    
    - alert: K8sMonitorHighCPU
      expr: rate(container_cpu_usage_seconds_total{pod=~"k8s-resource-monitor-.*"}[5m]) > 0.8
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "K8s Resource Monitor high CPU usage"
        description: "K8s Resource Monitor CPU usage is above 80% for more than 10 minutes."

---
# PersistentVolumeClaim for PostgreSQL (production 환경용)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: k8s-monitor-postgres-pvc
  namespace: k8s-monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
# PostgreSQL Deployment (production 환경용)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-monitor-postgres
  namespace: k8s-monitoring
  labels:
    app: k8s-monitor-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-monitor-postgres
  template:
    metadata:
      labels:
        app: k8s-monitor-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: k8s_monitor
        - name: POSTGRES_USER
          value: k8s_monitor
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: k8s-monitor-postgres-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - name: postgres
          containerPort: 5432
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - k8s_monitor
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - k8s_monitor
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: k8s-monitor-postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: k8s-monitor-postgres-service
  namespace: k8s-monitoring
  labels:
    app: k8s-monitor-postgres
spec:
  type: ClusterIP
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
  selector:
    app: k8s-monitor-postgres

---
# Secret for PostgreSQL
apiVersion: v1
kind: Secret
metadata:
  name: k8s-monitor-postgres-secret
  namespace: k8s-monitoring
type: Opaque
stringData:
  password: "your-secure-password-here"

---
# Redis Deployment (캐싱용 - 선택사항)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-monitor-redis
  namespace: k8s-monitoring
  labels:
    app: k8s-monitor-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-monitor-redis
  template:
    metadata:
      labels:
        app: k8s-monitor-redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "256mb"
        - --maxmemory-policy
        - "allkeys-lru"
        ports:
        - name: redis
          containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: k8s-monitor-redis-service
  namespace: k8s-monitoring
  labels:
    app: k8s-monitor-redis
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: k8s-monitor-redis